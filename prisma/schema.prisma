datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "cargo prisma"
  output   = "../src/prisma.rs"
}

enum LessonStatus {
  PENDING
  COMPLETED
  SKIPPED
}

enum Level {
  A1
  A2
  B1
  B2
  C1
  C2
}

model User {
  id                 BigInt       @id
  first_name         String       @db.VarChar(255)
  last_name          String?      @db.VarChar(255)
  username           String?      @unique @db.VarChar(33)
  language_code      String       @db.VarChar(2)
  allows_write_to_pm Boolean      @default(false)
  photo_url          String?      @db.VarChar(2048)
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt
  user_lessons       UserLesson[]
  user_stats         UserStats?

  @@index([username])
  @@index([id])
}

model Lesson {
  id           String       @id @default(uuid()) @db.Uuid
  lesson_data  Json
  studied_lang String       @db.VarChar(2)
  lesson_lang  String       @db.VarChar(2)
  level        Level
  created_at   DateTime     @default(now())
  user_lessons UserLesson[]

  @@index([studied_lang, lesson_lang, level])
  @@index([id])
}

model UserLesson {
  id             String       @id @default(uuid()) @db.Uuid
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         BigInt
  lesson         Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId       String       @db.Uuid
  score          Int          @default(0)
  status         LessonStatus @default(PENDING)
  completed_at   DateTime?
  next_available DateTime?

  @@unique([userId, lessonId])
  @@index([id])
  @@index([next_available])
}

model UserStats {
  userId        BigInt   @id
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  total_score   Int      @default(0)
  total_lessons Int      @default(0)
  updated_at    DateTime @updatedAt
}
