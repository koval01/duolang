name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  DOCKER_IMAGE: koval01/duolang

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pkg-config libssl-dev build-essential

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          prefix-key: x86_64-unknown-linux-gnu

      - name: Generate Prisma Client
        run: |
          cargo prisma generate

      - name: Build Release Binary
        run: cargo build --release

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: koval01
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version info
        id: vars
        run: |
          echo "build_date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
          echo "short_sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Prepare binaries for Docker
        run: |
          mkdir -p docker-files
          cp target/release/duolang docker-files/

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ steps.vars.outputs.build_date }}-${{ steps.vars.outputs.short_sha }}
