name: Build Server

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu

          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu

          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc

          - os: windows-latest
            arch: aarch64
            target: aarch64-pc-windows-msvc

          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v3

      - name: Cache OpenSSL for ARM
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        uses: actions/cache@v3
        with:
          path: /opt/openssl-arm64
          key: openssl-arm64-${{ matrix.target }}-v1.1.1
          restore-keys: |
            openssl-arm64-${{ matrix.target }}-

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo sed -i 's/noble/focal/g' /etc/apt/sources.list
          sudo apt-get update -y
          sudo apt-get install -y pkg-config libssl-dev
          
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            sudo apt-get install -y crossbuild-essential-arm64
          
            if [ ! -d "/opt/openssl-arm64" ]; then
              sudo apt-get install -y wget make
              wget https://www.openssl.org/source/openssl-1.1.1.tar.gz
              tar -xvf openssl-1.1.1.tar.gz
              cd openssl-1.1.1
              ./Configure linux-aarch64 --prefix=/opt/openssl-arm64
              make CC=aarch64-linux-gnu-gcc
              make install
            else
              echo "Using cached OpenSSL build at /opt/openssl-arm64"
            fi
          fi

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl

      - name: Install zip (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install zip

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src/prisma.rs
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Generate Prisma Client
        run: |
          cargo prisma generate

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.arch == 'aarch64' && 'aarch64-linux-gnu-gcc' || '' }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_AR: ${{ matrix.arch == 'aarch64' && 'aarch64-linux-gnu-ar' || '' }}
          PKG_CONFIG_SYSROOT_DIR: ${{ matrix.arch == 'aarch64' && '/' || '' }}
          PKG_CONFIG_PATH: ${{ matrix.arch == 'aarch64' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '' }}
          OPENSSL_DIR: ${{ matrix.arch == 'aarch64' && '/opt/openssl-arm64' || '/usr' }}
          OPENSSL_LIB_DIR: ${{ matrix.arch == 'aarch64' && '/opt/openssl-arm64/lib' || '/usr/lib/x86_64-linux-gnu' }}
          OPENSSL_INCLUDE_DIR: ${{ matrix.arch == 'aarch64' && '/opt/openssl-arm64/include' || '/usr/include' }}
          PKG_CONFIG_ALLOW_CROSS: ${{ matrix.arch == 'x86_64' && '1' || '' }}

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          
          case "${{ matrix.os }}" in
            "windows-latest")
              os_name="windows"
              binary_name="tma-rust.exe"
              ;;
            "macos-latest")
              os_name="macos"
              binary_name="tma-rust"
              ;;
            "ubuntu-latest")
              os_name="linux"
              binary_name="tma-rust"
              ;;
            *)
              echo "Unknown OS: ${{ matrix.os }}"
              exit 1
              ;;
          esac
          
          target_dir="target/${{ matrix.target }}/release/${binary_name}"
          if [ -f "$target_dir" ]; then
            new_name="tma-rust-${os_name}-${{ matrix.arch }}"
            cp "$target_dir" "artifacts/$new_name"
          else
            echo "Binary not found at: $target_dir"
            echo "Contents of target directory:"
            ls -R target/
            exit 1
          fi
          
          zip -j "artifacts/tma-rust-${os_name}-${{ matrix.arch }}.zip" artifacts/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "tma-rust-${{ matrix.os }}-${{ matrix.arch }}"
          path: artifacts/*.zip

      - name: Get short SHA
        id: vars
        run: echo "short_sha=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*
          name: ${{ env.short_sha }}
          tag_name: v1.0.${{ github.run_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
