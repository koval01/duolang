name: Build Server

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            arch: x86_64
            target: x86_64-unknown-linux-gnu

          - os: ubuntu-22.04
            arch: aarch64
            target: aarch64-unknown-linux-gnu

          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc

          - os: windows-latest
            arch: i686
            target: i686-pc-windows-msvc

          - os: windows-latest
            arch: aarch64
            target: aarch64-pc-windows-msvc

          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin

          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo tee /etc/apt/sources.list <<EOF
          deb [arch=amd64] https://archive.ubuntu.com/ubuntu/ jammy main restricted
          deb [arch=amd64] https://archive.ubuntu.com/ubuntu/ jammy-updates main restricted
          deb [arch=amd64] https://archive.ubuntu.com/ubuntu/ jammy universe
          deb [arch=amd64] https://archive.ubuntu.com/ubuntu/ jammy-updates universe
          deb [arch=amd64] https://archive.ubuntu.com/ubuntu/ jammy multiverse
          deb [arch=amd64] https://archive.ubuntu.com/ubuntu/ jammy-updates multiverse
          deb [arch=amd64] https://archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse
          deb [arch=amd64] https://security.ubuntu.com/ubuntu/ jammy-security main restricted
          deb [arch=amd64] https://security.ubuntu.com/ubuntu/ jammy-security universe
          deb [arch=amd64] https://security.ubuntu.com/ubuntu/ jammy-security multiverse
          deb [arch=armhf,arm64] https://ports.ubuntu.com/ubuntu-ports jammy main restricted
          deb [arch=armhf,arm64] https://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted
          deb [arch=armhf,arm64] https://ports.ubuntu.com/ubuntu-ports jammy universe
          deb [arch=armhf,arm64] https://ports.ubuntu.com/ubuntu-ports jammy-updates universe
          deb [arch=armhf,arm64] https://ports.ubuntu.com/ubuntu-ports jammy multiverse
          deb [arch=armhf,arm64] https://ports.ubuntu.com/ubuntu-ports jammy-updates multiverse
          deb [arch=armhf,arm64] https://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse
          deb [arch=armhf,arm64] https://ports.ubuntu.com/ubuntu-ports jammy-security main restricted
          deb [arch=armhf,arm64] https://ports.ubuntu.com/ubuntu-ports jammy-security universe
          deb [arch=armhf,arm64] https://ports.ubuntu.com/ubuntu-ports jammy-security multiverse
          EOF
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y pkg-config libssl-dev build-essential
          
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            sudo dpkg --add-architecture arm64
            sudo apt-get update -y
            sudo apt-get upgrade -y
            rustup target add ${{ matrix.target }}
            sudo apt-get install -y \
              gcc-aarch64-linux-gnu \
              g++-aarch64-linux-gnu \
              crossbuild-essential-arm64 \
              libssl-dev:arm64
          fi

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl

      - name: Install zip (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install zip

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.target }}

      - name: Generate Prisma Client
        run: |
          cargo prisma generate

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.arch == 'aarch64' && 'aarch64-linux-gnu-gcc' || '' }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_AR: ${{ matrix.arch == 'aarch64' && 'aarch64-linux-gnu-ar' || '' }}
          PKG_CONFIG_SYSROOT_DIR: ${{ matrix.arch == 'aarch64' && '/' || '' }}
          PKG_CONFIG_PATH: ${{ matrix.arch == 'aarch64' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '' }}
          PKG_CONFIG_ALLOW_CROSS: ${{ matrix.arch == 'x86_64' && '1' || '' }}

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts

          case "${{ matrix.os }}" in
            "windows-latest")
              os_name="windows"
              binary_name="tma-rust.exe"
              prisma_binary="prisma.exe"
              ;;
            "macos-latest")
              os_name="macos"
              binary_name="tma-rust"
              prisma_binary="prisma"
              ;;
            "ubuntu-22.04")
              os_name="linux"
              binary_name="tma-rust"
              prisma_binary="prisma"
              ;;
            *)
              echo "Unknown OS: ${{ matrix.os }}"
              exit 1
              ;;
          esac

          target_binary="target/${{ matrix.target }}/release/${binary_name}"
          if [ -f "$target_binary" ]; then
            new_name="tma-rust-${os_name}-${{ matrix.arch }}"
            cp "$target_binary" "artifacts/$new_name"
          else
            echo "Binary not found at: $target_binary"
            echo "Contents of target directory:"
            ls -R target/
            exit 1
          fi

          target_prisma="target/${{ matrix.target }}/release/${prisma_binary}"
          if [ -f "$target_prisma" ]; then
            new_prisma_name="tma-rust-prisma-${os_name}-${{ matrix.arch }}"
            cp "$target_prisma" "artifacts/$new_prisma_name"
          else
            echo "Prisma binary not found at: $target_prisma"
            echo "Contents of target directory:"
            ls -R target/
            exit 1
          fi

          zip -j "artifacts/tma-rust-${os_name}-${{ matrix.arch }}.zip" artifacts/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "tma-rust-${{ matrix.os }}-${{ matrix.arch }}"
          path: artifacts/*.zip

      - name: Get short SHA and current date
        id: vars
        shell: bash
        run: |
          if [[ matrix.os == "windows-latest" ]]; then
            echo "short_sha=${GITHUB_SHA::8}" >> $env:GITHUB_OUTPUT
            echo "build_date=$(Get-Date -Format 'yyyy.MM.dd')" >> $env:GITHUB_OUTPUT
          else
            echo "short_sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
            echo "build_date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*
          name: ${{ steps.vars.outputs.build_date }}-${{ steps.vars.outputs.short_sha }}
          tag_name: ${{ steps.vars.outputs.build_date }}-${{ steps.vars.outputs.short_sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
